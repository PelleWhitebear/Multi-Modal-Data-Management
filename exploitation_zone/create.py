import os
import boto3
import logging
import dotenv
import time
from global_scripts.utils import create_bucket, create_sub_bucket

dotenv.load_dotenv(dotenv.find_dotenv())

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    force=True  # override any existing config
)

def main():

    # MinIO client connection, using Amazon S3 API and boto3 Python library
    try:
        s3_client = boto3.client(
            "s3",
            endpoint_url=os.getenv("ENDPOINT_URL"),
            aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
            aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        )
        logging.info("Connected to MinIO.")

        # Create the bucket and the main sub-buckets
        create_bucket(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"))
        create_sub_bucket(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"), os.getenv("JSON_SUB_BUCKET"))
        create_sub_bucket(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"), os.getenv("MEDIA_SUB_BUCKET"))
        create_sub_bucket(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"), f"{os.getenv('MEDIA_SUB_BUCKET')}/image")
        create_sub_bucket(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"), f"{os.getenv('MEDIA_SUB_BUCKET')}/video")

    except Exception:
        logging.exception("Error connecting to MinIO.")
        return

    # Move data to exploitation-zone
    try:
        images = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix=f"{os.getenv('MEDIA_SUB_BUCKET')}/image/")
        videos = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix=f"{os.getenv('MEDIA_SUB_BUCKET')}/video/")
        media = images.get("Contents", []) + videos.get("Contents", [])
        deleted_media = []
        for obj in media:
            # Delete media older than today
            if str(time.strftime('%Y%m%d')) not in obj["Key"]:
                s3_client.delete_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=obj["Key"])
                deleted_media.append(obj["Key"])
                logging.info(f"Deleted media object: {obj['Key']}")

        media = [obj for obj in media if obj["Key"] not in deleted_media]
        sub_buckets = [f"{os.getenv('JSON_SUB_BUCKET')}", f"{os.getenv('MEDIA_SUB_BUCKET')}/image/", f"{os.getenv('MEDIA_SUB_BUCKET')}/video/"]
        for sub_bucket in sub_buckets:
            objs = s3_client.list_objects_v2(Bucket=os.getenv("FORMATTED_ZONE_BUCKET"), Prefix=sub_bucket)
            for obj in objs.get("Contents", []):
                if obj["Key"].endswith("/"):
                    continue  # Skip folder keys
                if obj["Key"] in media:
                    continue  # Skip images and videos

                s3_client.copy_object(
                    Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"),
                    CopySource={"Bucket": os.getenv("FORMATTED_ZONE_BUCKET"), "Key": obj["Key"]},
                    Key=obj["Key"]
                )
                logging.info(f"Copied {obj['Key']} to exploitation-zone.")
        logging.info("Data moved to exploitation-zone.")

    except Exception:
        logging.exception("Error moving data to exploitation-zone.")
        return


if __name__ == "__main__":
    main()