import sys
import os
import boto3
import logging
import json
from tqdm import tqdm
from datetime import datetime
import dotenv

dotenv.load_dotenv(dotenv.find_dotenv())

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    force=True  # override any existing config
)

def main():

    # MinIO client connection, using Amazon S3 API and boto3 Python library
    try:
        s3_client = boto3.client(
            "s3",
            endpoint_url=os.getenv("ENDPOINT_URL"),
            aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
            aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        )
        logging.info("Connected to MinIO.")

    except Exception:
        logging.exception("Error connecting to MinIO.")
        return
    
    exists_file = False
    delete_key = ""

    # Check if there is already a merged json in exploitation-zone
    try:
        check = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/")
        if "Contents" in check:
            for obj in check["Contents"]:
                if obj["Key"].endswith("#merged_games.json"):
                    logging.info("Merged JSON already exists.")
                    exists_file = True
                    delete_key = obj["Key"]
                    logging.info(f"File to be deleted: {delete_key}")
                    break
    except Exception:
        logging.exception("Error checking for existing merged JSON.")
        return

    try:
        logging.info("Getting JSON objects...")
        steam_objs = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/steam/")  # Change to trusted
        if "Contents" not in steam_objs:
            logging.error("No game data found in MinIO.")
            return
        filename = ""
        for obj in steam_objs["Contents"]:
            if obj["Key"].endswith("games.json"):
                filename = obj["Key"]
                res = s3_client.get_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=filename)
                steam_games = json.loads(res["Body"].read().decode("utf-8"))
                logging.info(f"Steam data fetched.")
                break
        if not filename:
            logging.error("No steam file found in MinIO.")
            return

        steamspy_objs = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/steamspy/")  # Change to trusted
        if "Contents" not in steamspy_objs:
            logging.error("No game data found in MinIO.")
            return
        for obj in steamspy_objs["Contents"]:
            if obj["Key"].endswith("games.json"):
                filename = obj["Key"]
                res = s3_client.get_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=filename)
                steamspy_games = json.loads(res["Body"].read().decode("utf-8"))
                logging.info(f"Steamspy data fetched.")
                break
        if not filename:
            logging.error("No steamspy file found in MinIO.")
            return

    except Exception:
        logging.exception("Error getting game data from MinIO.")
        return
    
    try:
        logging.info("Merging JSON files...")
        games = {}
        for game_id, game_data in tqdm(steam_games.items()):
            if game_id in steamspy_games:
                games[game_id] = {**game_data, **steamspy_games[game_id]}
            else:
                games[game_id] = game_data
        logging.info("JSON files merged successfully.")
    
    except Exception:
        logging.exception("Error merging JSON files.")
        return

    try:
        logging.info("Uploading merged JSON to MinIO...")
        merged_filename = f"json/{datetime.now().strftime('%Y%m%d_%H%M%S')}#merged_games.json"
        s3_client.put_object(
            Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"),
            Key=merged_filename,
            Body=json.dumps(games).encode("utf-8"),
            ContentType="application/json"
        )
        logging.info("Merged JSON uploaded successfully.")
    
    except Exception:
        logging.exception("Error uploading merged JSON to MinIO.")
        return

    if exists_file:
        # Delete the previously existing merged json
        try:
            logging.info("Deleting previous merged JSON...")
            s3_client.delete_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=delete_key)
            logging.info("Previous merged JSON deleted successfully.")
        
        except Exception:
            logging.exception("Error deleting previous merged JSON.")
            return

    logging.info("All operations completed successfully.")

    try:
        logging.info("Cleaning up exploitation zone...")
        objs = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/")
        if "Contents" not in objs:
            logging.error("Exploitation zone is empty")
            return
        for obj in objs["Contents"]:
            if "steam" in obj["Key"] or "steamspy" in obj["Key"]:
                logging.info(f"Deleting object: {obj['Key']}")
                s3_client.delete_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=obj["Key"])
        logging.info("Exploitation zone cleaned successfully.")

    except Exception:
        logging.exception("Error cleaning up exploitation zone.")
        return

if __name__ == "__main__":
    main()