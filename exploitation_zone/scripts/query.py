import sys
import os
import boto3
import logging
import json
from chromadb import HttpClient
from chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction
import dotenv

dotenv.load_dotenv(dotenv.find_dotenv())

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    force=True  # override any existing config
)

def main():

    # MinIO client connection, using Amazon S3 API and boto3 Python library
    try:
        s3_client = boto3.client(
            "s3",
            endpoint_url=os.getenv("ENDPOINT_URL"),
            aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
            aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        )
        logging.info("Connected to MinIO.")

    except Exception:
        logging.exception("Error connecting to MinIO.")
        return
    
    # Booting up ChromaDB
    try:
        chroma_client = HttpClient(
            host="chroma",
            port=8000
        )
        logging.info("Connected to ChromaDB.")
    
    except Exception:
        logging.exception("Error connecting to ChromaDB.")
        return
    
    # Load game data from MinIO
    try:
        objs = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/")
        if "Contents" not in objs:
            logging.error("No JSON files found in exploitation-zone.")
            return
        filename = ""
        for obj in objs["Contents"]:
            if obj["Key"].endswith("enhanced_games.json"):
                filename = obj["Key"]
                break

        game_obj = s3_client.get_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=filename)
        games = json.loads(game_obj["Body"].read().decode("utf-8"))
        logging.info(f"Game data fetched.")
    
    except Exception:
        logging.exception("Error fetching game JSON from MinIO.")
        return

    try:
        query_text = "I want to play a war simulation game."

        # Query text embeddings
        text_collection = chroma_client.get_collection("text")
        text_results = text_collection.query(
            query_texts=[query_text],
            n_results=10
        )
        logging.info("Text query executed.")
        logging.info(f"\nText Query: {query_text}")
        logging.info("Results:")
        for similarity, doc_id, doc in zip(text_results['distances'][0], text_results['ids'][0], text_results['documents'][0]):
            logging.info(f"Similarity: {similarity}, ID: {doc_id}, Name: {games[doc_id]['name']}")
        logging.info("\n\n")

        # Query image embeddings
        image_collection = chroma_client.get_collection("image")
        image_results = image_collection.query(
            query_texts=[query_text],
            n_results=10
        )
        logging.info("\nImage query executed.")
        logging.info(f"\nText Query: {query_text}")
        logging.info("Results:")
        for similarity, doc_id in zip(image_results['distances'][0], image_results['ids'][0]):
            logging.info(f"Similarity: {similarity}, ID: {doc_id.split('_')[0]}, Name: {games[doc_id.split('_')[0]]['name']}, Image: {games[doc_id.split('_')[0]]['screenshots'][int(doc_id.split('_')[1])-1]}")
        logging.info("\n\n")

        # Query video embeddings
        video_collection = chroma_client.get_collection("video")
        video_results = video_collection.query(
            query_texts=[query_text],
            n_results=10
        )
        logging.info("\nVideo query executed.")
        logging.info(f"\nText Query: {query_text}")
        logging.info("Results:")
        for similarity, doc_id in zip(video_results['distances'][0], video_results['ids'][0]):
            logging.info(f"Similarity: {similarity}, ID: {doc_id}, Name: {games[doc_id.split('_')[0]]['name']}, Video: {games[doc_id.split('_')[0]]['movies'][0]}")
        logging.info("\n\n")
    except Exception:
        logging.exception("Error executing example queries.")
        return


if __name__ == "__main__":
    main()



