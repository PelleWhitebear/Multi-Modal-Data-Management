import os
import logging
import json
from tqdm import tqdm
from datetime import datetime
import dotenv
from global_scripts.utils import minio_init, load_games_from_minio

dotenv.load_dotenv(dotenv.find_dotenv())

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    force=True  # override any existing config
)

def merge_jsons(steam_games, steamspy_games):
    """
    Merge two JSON dictionaries containing game data.

    :param steam_games: Dictionary from steam games JSON
    :param steamspy_games: Dictionary from steamspy games JSON
    :return: Merged dictionary containing game data from both sources
    """
    try:
        logging.info("Merging JSON files...")
        games = {}
        for game_id, game_data in tqdm(steam_games.items()):
            if game_id in steamspy_games:
                games[game_id] = {**game_data, **steamspy_games[game_id]}
            else:
                games[game_id] = game_data
        logging.info("JSON files merged successfully.")
        return games
    except Exception:
        logging.exception("Error merging JSON files.")
        return {}

def main():

    # MinIO client connection, using Amazon S3 API and boto3 Python library
    s3_client = minio_init()

    exists_file = False
    delete_key = ""

    # Check if there is already a merged json in exploitation-zone
    try:
        check = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/")
        if "Contents" in check:
            for obj in check["Contents"]:
                if obj["Key"].endswith("#merged_games.json"):
                    logging.info("Merged JSON already exists.")
                    exists_file = True
                    delete_key = obj["Key"]
                    logging.info(f"File to be deleted: {delete_key}")
                    break
    except Exception:
        logging.exception("Error checking for existing merged JSON.")
        return

    # Load steam and steamspy json files from MinIO
    steam_games = load_games_from_minio(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"), "json/steam/", "games.json")
    steamspy_games = load_games_from_minio(s3_client, os.getenv("EXPLOITATION_ZONE_BUCKET"), "json/steamspy/", "games.json")
    
    # Merge the two json files
    games = merge_jsons(steam_games, steamspy_games)
    if not games:
        logging.error("No games to upload after merging. Exiting.")
        return
    
    # Upload the merged json to MinIO
    try:
        logging.info("Uploading merged JSON to MinIO...")
        merged_filename = f"json/{datetime.now().strftime('%Y%m%d_%H%M%S')}#merged_games.json"
        s3_client.put_object(
            Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"),
            Key=merged_filename,
            Body=json.dumps(games).encode("utf-8"),
            ContentType="application/json"
        )
        logging.info("Merged JSON uploaded successfully.")
    
    except Exception:
        logging.exception("Error uploading merged JSON to MinIO.")
        return

    if exists_file:
        # Delete the previously existing merged json
        try:
            logging.info("Deleting previous merged JSON...")
            s3_client.delete_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=delete_key)
            logging.info("Previous merged JSON deleted successfully.")
        
        except Exception:
            logging.exception("Error deleting previous merged JSON.")
            return

    logging.info("All operations completed successfully.")

    # Clean up exploitation zone by removing steam and steamspy json files
    try:
        logging.info("Cleaning up exploitation zone...")
        objs = s3_client.list_objects_v2(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Prefix="json/")
        if "Contents" not in objs:
            logging.error("Exploitation zone is empty")
            return
        for obj in objs["Contents"]:
            if "steam" in obj["Key"] or "steamspy" in obj["Key"]:
                logging.info(f"Deleting object: {obj['Key']}")
                s3_client.delete_object(Bucket=os.getenv("EXPLOITATION_ZONE_BUCKET"), Key=obj["Key"])
        logging.info("Exploitation zone cleaned successfully.")

    except Exception:
        logging.exception("Error cleaning up exploitation zone.")
        return

if __name__ == "__main__":
    main()